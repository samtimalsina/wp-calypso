/**
 * External dependencies
 */
import React, { Component, PropTypes } from 'react';
import { connect } from 'react-redux';

/**
 * Internal dependencies
 */
import Card from 'components/card';
import { localize } from 'i18n-calypso';
import { getTwoFactorPushPollSuccess } from 'state/login/selectors';
import {
	startPollAppPushAuth,
	stopPollAppPushAuth,
} from 'state/login/actions';

class WaitingTwoFactorNotificationApproval extends Component {
	static propTypes = {
		onSuccess: PropTypes.func.isRequired,
		pushSuccess: PropTypes.bool.isRequired,
		startPollAppPushAuth: PropTypes.func.isRequired,
		stopPollAppPushAuth: PropTypes.func.isRequired,
	};

	componentDidMount() {
		this.props.startPollAppPushAuth();
	}

	componentWillUnmount() {
		this.props.stopPollAppPushAuth();
	}

	componentWillReceiveProps( nextProps ) {
		if ( ! this.props.pushSuccess && nextProps.pushSuccess ) {
			this.props.onSuccess();
		}
	}

	render() {
		const {
			translate,
			pushSuccess,
		} = this.props;

		return <form>
			<Card className="two-factor-authentication__push-notification-screen is-compact">
				<p>
					{ pushSuccess ? translate( 'Awesome, you are now logged in! One moment while we take you to homepageâ€¦' )
						: translate( 'We just sent a push notification to your WordPress mobile app. ' +
						'Swipe or tap to open and verify your login.' ) }
				</p>
				<div>
					<img className="two-factor-authentication__auth-code-preview" src="/calypso/images/login/pushauth.svg" />
				</div>
				<p>
					{ translate( 'Or, type in the verification code generated by your Authenticator app' +
						' or sent via text.' ) }
				</p>
			</Card>
			<Card className="two-factor-authentication__form-action is-compact">
				<p>
					{ translate( 'Or, continue to your account using:' ) }
				</p>
				<p>
					<a href="#">{ translate( 'A recovery code via text' ) }</a>
				</p>
				<p>
					<a href="#">{ translate( 'An Authenticator application' ) }</a>
				</p>
			</Card>
		</form>;
	}
}

export default connect(
	state => ( {
		pushSuccess: getTwoFactorPushPollSuccess( state ),
	} ),
	{
		startPollAppPushAuth,
		stopPollAppPushAuth,
	},
)( localize( WaitingTwoFactorNotificationApproval ) );
